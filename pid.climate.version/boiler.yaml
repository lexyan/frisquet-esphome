esphome:
  name: boiler
  includes:
  - FrisquetBoilerFloatOutput.h

substitutions:
  name: "Chaudière Frisquet"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: INFO
    text_sensor: INFO

# Enable Home Assistant API
api:

ota:
  password: "86d8d705bb585eaf7a68c592a025884c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Boiler Fallback Hotspot"
    password: "tzTyXUqS2i2e"

captive_portal:

web_server:
  port: 80

dallas:
  - pin: GPIO26
    
globals:
  - id: manual_override
    type: int
    restore_value: no
    initial_value: '-1'

binary_sensor:
  - platform: status
    name: "Statut ${name}" 
    
text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    
sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: "Signal WiFi ${name}"
    update_interval: 60s
    unit_of_measurement: dB
    accuracy_decimals: 0
    force_update: false
    icon: mdi:wifi
  
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.aqara_salon_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      - heartbeat: 5s
        
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: sensor.aqara_exterieur_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      - heartbeat: 60s

  - platform: template
    id: setpoint
    name: "Consigne Thermostat"
    unit_of_measurement: "°C"
    lambda: |-
      return id(pid_climate).target_temperature;

  - platform: template
    id: heating_curve
    name: "Loi d'eau"
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    lambda: |-
      return (1.8 * (id(setpoint).state - id(outdoor_temperature).state) + 23);

  - platform: homeassistant
    entity_id: input_number.consigne_manuelle_chaudiere
    id: boiler_manual_setpoint
    unit_of_measurement: "°C"
    on_value:
      then:
        - globals.set:
            id: manual_override
            value: !lambda 'return int(x);'

  - platform: pid
    name: "Consigne chaudière"
    type: HEAT
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    filters:
      - lambda: |-
          if (id(manual_override) >= 0) {
            return id(manual_override);
          } else {
             return (x > 0) ? (x * 80) / 100 + 20 : 0;
          }

  - platform: pid
    name: "Demande en chaleur"
    type: HEAT
    unit_of_measurement: "%"
    
  - platform: pid
    name: "Valeur PID"
    type: RESULT
    unit_of_measurement: "%"

  - platform: dallas
    address: 0xA2032131AB675C28
    name: "Départ chaudière"

  - platform: dallas
    address: 0xAB03213190136128
    name: "Retour chaudière"

climate:
  - platform: pid
    id: pid_climate
    name: "${name}"
    sensor: current_temperature
    default_target_temperature: 20°C
    heat_output: boiler_cmd
    control_parameters:
      min_integral: 0
      kp: 0.5
      ki: 0.00006944
      kd: 0
    visual:
      min_temperature: 7 °C
      max_temperature: 28 °C
      temperature_step: 0.1 °C

output:
  - platform: custom
    type: float
    lambda: |-
      auto boiler_float_output = new FrisquetBoilerFloatOutput();
      boiler_float_output->set_max_power(1.0);
      boiler_float_output->set_min_power(0.2);
      boiler_float_output->set_zero_means_zero(true);
      App.register_component(boiler_float_output);
      return {boiler_float_output};
    outputs:
      id: boiler_cmd

switch:
  - platform: restart
    name: "${name} reboot"
