substitutions:
  device: boiler
  name: "Chaudière Frisquet"
  reboot_timeout: 14d
  update_interval: 60s
  ota_password: "86d8d705bb585eaf7a68c592a025884c"

esphome:
  name: ${device}
  includes:
  - custom/FrisquetBoilerFloatOutput.h
  - custom/HeatCurveClimate.h

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  baud_rate: 0
  level: DEBUG
  logs:
    sensor: INFO
    text_sensor: INFO

globals:
  - id: global_heat_factor
    type: float
    restore_value: yes
    initial_value: "1.7"
  - id: global_offset
    type: float
    restore_value: yes
    initial_value: "20.0"
  - id: global_kp
    type: float
    restore_value: no
    initial_value: "0.0"

api:
  services:
    - service: set_heating_curve
      variables:
        heat_factor: float
        offset: float
        kp: float
      then:
        - logger.log:
            format: "Setting new heat factor: %.1f"
            args: [heat_factor]
        - globals.set:
            id: global_heat_factor
            value: !lambda 'return heat_factor;'
        - logger.log:
            format: "Setting new offset: %.1f"
            args: [offset]
        - globals.set:
            id: global_offset
            value: !lambda 'return offset;'
        - logger.log:
            format: "Setting new kp: %.1f"
            args: [kp]
        - globals.set:
            id: global_kp
            value: !lambda 'return kp;'    

<<: !include common/wifi.yaml
<<: !include common/ota.yaml
<<: !include common/web_server.yaml
<<: !include common/text_sensors.yaml
<<: !include common/binary_sensors.yaml
<<: !include common/switches.yaml

dallas:
  - pin: GPIO26
        
sensor:
  - !include common/sensor/wifi-signal.yaml
  - !include common/sensor/uptime.yaml
  
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.aqara_salon_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      - heartbeat: 60s
        
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: sensor.outdoor_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      - heartbeat: 60s

  - platform: template
    id: heating_curve
    name: "Consigne chaudière"
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    id: heat_factor
    name: "global_heat_factor"
    accuracy_decimals: 1
    lambda: 'return id(global_heat_factor);'

  - platform: template
    id: offset
    name: "global_offset"
    accuracy_decimals: 1
    lambda: 'return id(global_offset);'

  - platform: template
    id: kp
    name: "global_kp"
    accuracy_decimals: 1
    lambda: 'return id(global_kp);'

  - platform: dallas
    address: 0xA2032131AB675C28
    name: "Départ chaudière"

  - platform: dallas
    address: 0xAB03213190136128
    name: "Retour chaudière"

climate:
  - platform: custom
    id: custom_climate
    lambda: |-
      auto custom_climate = new HeatCurveClimate();
      custom_climate->set_sensor(id(current_temperature));
      custom_climate->set_outdoor_sensor(id(outdoor_temperature));
      custom_climate->set_output(id(boiler_cmd));
      custom_climate->set_water_temp_sensor(id(heating_curve));
      custom_climate->set_output_conversion_factor(1.90);
      custom_climate->set_output_conversion_offset(-41);
      App.register_component(custom_climate);
      return {custom_climate};

    climates:
      - name: "${name}"

output:
  - platform: custom
    type: float
    lambda: |-
      auto boiler_float_output = new FrisquetBoilerFloatOutput();
      boiler_float_output->set_max_power(1.0);
      boiler_float_output->set_min_power(0);
      boiler_float_output->set_zero_means_zero(true);
      App.register_component(boiler_float_output);
      return {boiler_float_output};
    outputs:
      id: boiler_cmd
